[{"E:\\react_js\\react_hooks_intro\\src\\index.js":"1","E:\\react_js\\react_hooks_intro\\src\\App.js":"2","E:\\react_js\\react_hooks_intro\\src\\reportWebVitals.js":"3","E:\\react_js\\react_hooks_intro\\src\\Login.js":"4","E:\\react_js\\react_hooks_intro\\src\\Register.js":"5"},{"size":539,"mtime":1609418006924,"results":"6","hashOfConfig":"7"},{"size":2755,"mtime":1609391168100,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"7"},{"size":1363,"mtime":1609391926229,"results":"10","hashOfConfig":"7"},{"size":1345,"mtime":1609321652300,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"a3srjq",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"E:\\react_js\\react_hooks_intro\\src\\index.js",[],"E:\\react_js\\react_hooks_intro\\src\\App.js",["25"],"import React, {useState, useEffect} from 'react';\n\n\nconst initialLocationState = {\n  latitude: null,\n  longitude: null,\n  speed: null,\n}\n\nfunction App() {\n\n  const [count, setCount] = useState(0);\n  const [light, setLight] = useState(false);\n  const [mousePosition, setMousePosition] = useState({ x:null, y:null });\n  const [status, setStatus] = useState(navigator.onLine);  //navigator.online returns our network status\n  const [location, setLocation] = useState(initialLocationState);\n  let mounted = true;\n\n  useEffect(() => {\n    document.title = `You have clicked ${count} times`;\n    window.addEventListener('mousemove', handleMouseMove);\n    window.addEventListener('online', handleOnline);\n    window.addEventListener('offline', handleOffline);\n    navigator.geolocation.getCurrentPosition(handleGeoLocation);    //it only takes a function\n    //to watch our current location, it keeps on returning position as the user moves\n    const watchId = navigator.geolocation.watchPosition(handleGeoLocation);   \n\n\n    //clean up, prevents memory leaks\n    return () => {\n      window.removeEventListener('mousemove', handleMouseMove);\n      window.removeEventListener('online', handleOnline);\n      window.removeEventListener('offline', handleOffline);\n      mounted = false;\n      //stops watch position\n      navigator.geolocation.clearWatch(watchId);\n    }\n  }, [count])\n\n  const handleMouseMove = (e) => {\n    setMousePosition({\n      x:e.pageX,\n      y:e.pageY\n    })\n  }\n\n  const handleOnline = (e) => {\n    setStatus(true);\n  }\n  \n  const handleOffline = (e) => {\n    setStatus(false);\n  }\n\n  const handleGeoLocation = (e) => {\n    if(mounted){\n      setLocation({\n        latitude: e.coords.latitude,\n        longitude: e.coords.longitude,\n        speed: e.coords.speed\n      })  \n    }\n  }\n\n\n  //we can also do it using prevCount.... setCount(prevCount => prevCount+1)\n  return (\n    <div>\n      {/* Hello World */}\n      <h2>Counter</h2>\n      <button onClick={() => setCount(count+1)}>I'm clicked {count} times</button>\n\n      <h2>Toggle light</h2>\n      <div\n        //src = { light ? './images/lightOn.jpg' : './images/lightOff.jpg'}\n        style={{\n          width: '100px',\n          height: '100px',\n          background: light ? 'yellow' : 'gray'\n        }} \n        onClick={() => setLight(!light)}>\n\n      </div>\n\n      <h2>Mouse Position</h2>\n      <p>x: {mousePosition.x} <br/> y: {mousePosition.y} </p>\n\n      <h2>Network Status</h2>\n      <p>You are currently <strong>{status ? 'online' : 'offline'}</strong></p>\n\n\n      <h2>GeoLocation</h2>\n      <p>latitude: {location.latitude}</p>\n      <p>longitude: {location.longitude}</p>\n      <p>Speed: {location.speed ? location.speed : '0'}</p>\n\n    </div>\n  );\n}\n\nexport default App;\n","E:\\react_js\\react_hooks_intro\\src\\reportWebVitals.js",[],["26","27"],"E:\\react_js\\react_hooks_intro\\src\\Login.js",[],"E:\\react_js\\react_hooks_intro\\src\\Register.js",[],["28","29"],{"ruleId":"30","severity":1,"message":"31","line":34,"column":17,"nodeType":"32","endLine":34,"endColumn":22},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"33","replacedBy":"37"},{"ruleId":"35","replacedBy":"38"},"react-hooks/exhaustive-deps","Assignments to the 'mounted' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","no-native-reassign",["39"],"no-negated-in-lhs",["40"],["39"],["40"],"no-global-assign","no-unsafe-negation"]